// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubenext/kubefun/pkg/plugin (interfaces: ModuleRegistrar)

// Package fake is a generated GoMock package.
package fake

import (
	gomock "github.com/golang/mock/gomock"
	module "github.com/kubenext/kubefun/internal/module"
	reflect "reflect"
)

// MockModuleRegistrar is a mock of ModuleRegistrar interface
type MockModuleRegistrar struct {
	ctrl     *gomock.Controller
	recorder *MockModuleRegistrarMockRecorder
}

// MockModuleRegistrarMockRecorder is the mock recorder for MockModuleRegistrar
type MockModuleRegistrarMockRecorder struct {
	mock *MockModuleRegistrar
}

// NewMockModuleRegistrar creates a new mock instance
func NewMockModuleRegistrar(ctrl *gomock.Controller) *MockModuleRegistrar {
	mock := &MockModuleRegistrar{ctrl: ctrl}
	mock.recorder = &MockModuleRegistrarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModuleRegistrar) EXPECT() *MockModuleRegistrarMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockModuleRegistrar) Register(arg0 module.Module) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockModuleRegistrarMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockModuleRegistrar)(nil).Register), arg0)
}
