// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubenext/kubefun/pkg/plugin/api/proto (interfaces: DashboardClient)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/kubenext/kubefun/pkg/plugin/api/proto"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockDashboardClient is a mock of DashboardClient interface
type MockDashboardClient struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardClientMockRecorder
}

// MockDashboardClientMockRecorder is the mock recorder for MockDashboardClient
type MockDashboardClientMockRecorder struct {
	mock *MockDashboardClient
}

// NewMockDashboardClient creates a new mock instance
func NewMockDashboardClient(ctrl *gomock.Controller) *MockDashboardClient {
	mock := &MockDashboardClient{ctrl: ctrl}
	mock.recorder = &MockDashboardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDashboardClient) EXPECT() *MockDashboardClientMockRecorder {
	return m.recorder
}

// CancelPortForward mocks base method
func (m *MockDashboardClient) CancelPortForward(arg0 context.Context, arg1 *proto.CancelPortForwardRequest, arg2 ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelPortForward", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelPortForward indicates an expected call of CancelPortForward
func (mr *MockDashboardClientMockRecorder) CancelPortForward(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPortForward", reflect.TypeOf((*MockDashboardClient)(nil).CancelPortForward), varargs...)
}

// ForceFrontendUpdate mocks base method
func (m *MockDashboardClient) ForceFrontendUpdate(arg0 context.Context, arg1 *proto.Empty, arg2 ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForceFrontendUpdate", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceFrontendUpdate indicates an expected call of ForceFrontendUpdate
func (mr *MockDashboardClientMockRecorder) ForceFrontendUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceFrontendUpdate", reflect.TypeOf((*MockDashboardClient)(nil).ForceFrontendUpdate), varargs...)
}

// Get mocks base method
func (m *MockDashboardClient) Get(arg0 context.Context, arg1 *proto.KeyRequest, arg2 ...grpc.CallOption) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDashboardClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDashboardClient)(nil).Get), varargs...)
}

// List mocks base method
func (m *MockDashboardClient) List(arg0 context.Context, arg1 *proto.KeyRequest, arg2 ...grpc.CallOption) (*proto.ListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*proto.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockDashboardClientMockRecorder) List(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDashboardClient)(nil).List), varargs...)
}

// PortForward mocks base method
func (m *MockDashboardClient) PortForward(arg0 context.Context, arg1 *proto.PortForwardRequest, arg2 ...grpc.CallOption) (*proto.PortForwardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortForward", varargs...)
	ret0, _ := ret[0].(*proto.PortForwardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortForward indicates an expected call of PortForward
func (mr *MockDashboardClientMockRecorder) PortForward(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortForward", reflect.TypeOf((*MockDashboardClient)(nil).PortForward), varargs...)
}

// Update mocks base method
func (m *MockDashboardClient) Update(arg0 context.Context, arg1 *proto.UpdateRequest, arg2 ...grpc.CallOption) (*proto.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*proto.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockDashboardClientMockRecorder) Update(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDashboardClient)(nil).Update), varargs...)
}
